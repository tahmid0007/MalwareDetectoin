"""
Created on FRI Oct 21 16:38:11 2022

@author: mthossain
"""

import pandas as pd
from sklearn.ensemble import ExtraTreesRegressor, RandomForestClassifier
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import pickle


def get_data(file_name):
    print("Reading Data........")
    df = pd.read_excel(file_name, sheet_name=None)
    final_dataset = df["in"]
    final_dataset = final_dataset.filter(["dur","sbytes","sload","attack_cat","label"])
    
    y = final_dataset.iloc[:,-1]
    
    final_dataset.drop(['label'],axis=1,inplace=True)
    final_dataset=pd.get_dummies(final_dataset,drop_first=True)
    
    X = final_dataset.iloc[:,:]
    return X, y, df

def train_classifier(train_X, train_Y):
    print("Training Model ........")
    model = ExtraTreesRegressor()
    model.fit(train_X, train_Y)
    
    feat_importances = pd.Series(model.feature_importances_, index = train_X.columns)
    feat_importances.nlargest(5).plot(kind='barh')
    plt.show()

    return model

def test_classifier(test_X, test_Y, model):
    
    print("Testing........")
    predictions = model.predict(test_X)
    print(f"accuracy {accuracy_score(test_Y, predictions) * 100}%")
    
def save_model(model):
    
    print("Saving Model........")
    file = open('model.pkl', 'wb')
    pickle.dump(model, file)

def data_analysis(df):
    final_dataset = df["in"]
    print(final_dataset.isnull().sum())
    print(final_dataset['attack_cat'].unique())
    print(final_dataset.corr())
    
def main():
    #dummy = "C:\\Users\\mthossain\\Downloads\\tr.xlsx"
    train_file = "C:\\Users\\mthossain\\Downloads\\UNSW_NB15_training-set 1.xlsx"
    test_file = "C:\\Users\\mthossain\\Downloads\\UNSW_NB15_testing-set.xlsx"
    
    
    train_X, train_Y, df = get_data(train_file)
    test_X, test_Y, _ = get_data(test_file)
    
    data_analysis(df)
    
    model = train_classifier(train_X, train_Y)
    test_classifier(test_X, test_Y, model)
    
    save_model(model)
    
main()




